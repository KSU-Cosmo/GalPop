# .github/workflows/ci.yml
name: CI

on:
  push:
    branches: [main, master]
    tags: ['*']
  pull_request:

jobs:
  test:
    name: Julia ${{ matrix.version }} - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        version:
          - '1.6'  # LTS version
          - '1'    # Latest stable release
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest

    steps:
      - uses: actions/checkout@v3
      - uses: julia-actions/setup-julia@v1
        with:
          version: ${{ matrix.version }}
      - uses: julia-actions/cache@v1
      - uses: julia-actions/julia-buildpkg@v1
        working-directory: ./julia
      - uses: julia-actions/julia-runtest@v1
        working-directory: ./julia
        env:
          JULIA_COVERAGE: "true"
      # Code coverage
      - uses: julia-actions/julia-processcoverage@v1
        with:
          directories: ./julia/src
      - uses: codecov/codecov-action@v3
        with:
          file: ./lcov.info
          flags: julia

  python-test:
    name: Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.8', '3.9', '3.10']

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up Julia
        uses: julia-actions/setup-julia@v1
        with:
          version: '1'
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov flake8 black
          pip install -e ./python
      - name: Lint with flake8
        run: |
          cd python
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Check formatting with black
        run: |
          cd python
          black --check .
      - name: Run tests with coverage
        run: |
          cd python
          pytest --cov=galpop --cov-report=xml
      - name: Upload Python coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./python/coverage.xml
          flags: python

  julia-lint:
    name: Julia Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: julia-actions/setup-julia@v1
      - name: Install JuliaFormatter
        run: |
          julia --project=./julia -e 'using Pkg; Pkg.add("JuliaFormatter")'
      - name: Format check
        run: |
          julia --project=./julia -e '
            using JuliaFormatter
            format_check = format("./julia/src", verbose=true)
            @assert format_check "Some files are not properly formatted. Run JuliaFormatter.format(\"./julia/src\") to fix."'

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: julia-actions/setup-julia@v1
        with:
          version: '1'
      - name: Install dependencies
        run: |
          julia --project=docs -e '
            using Pkg
            Pkg.develop(PackageSpec(path=pwd()))
            Pkg.instantiate()'
      - name: Build and deploy docs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }}
        run: |
          julia --project=docs -e '
            using Documenter
            using GalPop
            DocMeta.setdocmeta!(GalPop, :DocTestSetup, :(using GalPop); recursive=true)
            include("docs/make.jl")'
