# .github/workflows/ci.yml
name: CI

on:
  push:
    branches: [main, master]
    tags: ['*']
  pull_request:

jobs:
  test:
    name: Julia ${{ matrix.version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version:
          - '1'    # Latest stable release

    steps:
      - uses: actions/checkout@v3
      - uses: julia-actions/setup-julia@v1
        with:
          version: ${{ matrix.version }}
      - uses: julia-actions/cache@v1
      - name: Build package
        run: |
          cd julia
          julia --project -e 'using Pkg; Pkg.instantiate(); Pkg.build()'
      - name: Run tests
        run: |
          cd julia
          julia --project -e 'using Pkg; Pkg.test(coverage=true)'
      # Code coverage
      - uses: julia-actions/julia-processcoverage@v1
        with:
          directories: './julia/src'
      - uses: codecov/codecov-action@v3
        with:
          file: './lcov.info'
          flags: julia
          token: ${{ secrets.CODECOV_TOKEN }}
          
  python-test:
    name: Python Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Set up Julia
        uses: julia-actions/setup-julia@v1
        with:
          version: '1'
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov flake8 black numpy julia
          if [ -d "./python" ]; then
            pip install -e ./python
          fi
      - name: Install Julia dependencies for PyJulia
        run: |
          julia -e 'using Pkg; Pkg.add("PyCall"); Pkg.add("SpecialFunctions")'
          python -c "import julia; julia.install()"
      - name: Lint with flake8
        run: |
          if [ -d "./python" ]; then
            cd python
            flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
            flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          fi
      - name: Check formatting with black
        run: |
          if [ -d "./python" ]; then
            cd python
            black --check .
          fi
      - name: Run tests with coverage
        run: |
          if [ -d "./python" ]; then
            cd python
            pytest --cov=galpop --cov-report=xml
          fi
      - name: Upload Python coverage to Codecov
        if: ${{ success() && hashFiles('./python/coverage.xml') != '' }}
        uses: codecov/codecov-action@v3
        with:
          file: './python/coverage.xml'
          flags: python

  julia-lint:
    name: Julia Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: julia-actions/setup-julia@v1
      - name: Install JuliaFormatter
        run: |
          julia -e 'using Pkg; Pkg.add("JuliaFormatter")'
      - name: Format check
        run: |
          if [ -d "./julia/src" ]; then
            julia -e '
              using JuliaFormatter
              format_check = format("./julia/src", verbose=true)
              if !format_check
                @error "Some files are not properly formatted. Run JuliaFormatter.format(\"./julia/src\") to fix."
                exit(1)
              end'
          fi
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
      - uses: julia-actions/setup-julia@v1
        with:
          version: '1'
      - name: Debug directory structure
        run: |
          echo "Current directory:"
          pwd
          echo "Directory contents:"
          ls -la
          echo "Docs directory contents (if exists):"
          if [ -d "docs" ]; then
            ls -la docs
            if [ -f "docs/Project.toml" ]; then
              echo "docs/Project.toml exists"
              cat docs/Project.toml
            else
              echo "docs/Project.toml missing"
            fi
          else
            echo "docs directory missing"
          fi
      - name: Configure docs environment
        run: |
          julia --project=docs/ -e '
            using Pkg
            Pkg.develop(PackageSpec(path="julia"))
            Pkg.instantiate()'
      - name: Build and deploy docs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          julia --project=docs/ docs/make.jl