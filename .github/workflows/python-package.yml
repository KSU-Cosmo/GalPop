name: Python-Julia package

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    # Cache Python dependencies
    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-python-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-python-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest pytest-cov
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    # Cache Julia installation and environment with proper ID
    - name: Cache Julia dependencies
      id: cache-julia
      uses: actions/cache@v4
      with:
        path: |
          ~/.julia/packages
          ~/.julia/environments
          ~/.julia/artifacts
        key: ${{ runner.os }}-julia-${{ hashFiles('**/Project.toml', '**/Manifest.toml') }}
        restore-keys: |
          ${{ runner.os }}-julia-

    # Install Julia only if necessary
    - name: Install Julia
      uses: julia-actions/setup-julia@v2
      with:
        version: "1.11"
      if: steps.cache-julia.outputs.cache-hit != 'true'

    # Setup PyCall only if necessary
    - name: Setup PyCall to use GitHub Actions Python
      run: |
        julia -e 'using Pkg;
        if !haskey(Pkg.installed(), "PyCall")
          Pkg.add("PyCall");
        end;
        ENV["PYTHON"] = Sys.which("python");
        Pkg.build("PyCall")'
      if: steps.cache-julia.outputs.cache-hit != 'true'

    # Install Julia Packages only if necessary
    - name: Install Julia Packages
      run: |
        julia -e 'using Pkg; Pkg.add(["SpecialFunctions", "Random", "Statistics"])'
      if: steps.cache-julia.outputs.cache-hit != 'true'

    - name: Initialize Julia in Python
      run: |
        python -c "import julia; julia.Julia(compiled_modules=False)"

    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with pytest
      env:
        PYTHONPATH: .:src
      run: |
        pytest --cov-branch --cov-report=xml --cov=. tests/

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@main
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        slug: KSU-Cosmo/GalPop