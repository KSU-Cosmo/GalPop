name: Python-Julia package

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11"]
        julia-version: ["1.11"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest pytest-cov
        pip install -r requirements.txt

    - name: Install Julia
      uses: julia-actions/setup-julia@v2
      with:
        version: ${{ matrix.julia-version }}

    # Install required Julia packages
    - name: Install Julia dependencies
      run: |
        julia -e '
          using Pkg
          Pkg.add(["PyCall", "SpecialFunctions", "Random", "Statistics"])
        '

    # Setup PyCall with explicit configuration
    - name: Setup PyCall
      run: |
        PYTHON_PATH=$(which python)
        echo "Python path: $PYTHON_PATH"
        julia -e '
          using Pkg
          ENV["PYTHON"] = "'$PYTHON_PATH'"
          println("Setting PyCall Python to: ", ENV["PYTHON"])
          Pkg.build("PyCall")
          using PyCall
          println("PyCall configured with Python: ", PyCall.python)
        '

    # Verify that everything is in place
    - name: Debug directory structure
      run: |
        echo "Current directory structure:"
        find . -type f -name "*.py" | sort
        find . -type f -name "*.jl" | sort
        
        # Verify helper exists
        [ -f tests/julia_helper.py ] && echo "✓ julia_helper.py exists" || echo "✗ julia_helper.py missing"
        
        # Verify test can import helper
        python -c "import sys; sys.path.insert(0, '.'); import tests.julia_helper; print('✓ Successfully imported helper')" || echo "✗ Failed to import helper"

    # Run tests 
    - name: Test with pytest
      env:
        PYTHONPATH: ${{ github.workspace }}:${{ github.workspace }}/src
      run: |
        echo "PYTHONPATH: $PYTHONPATH"
        pytest -v tests/

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@main
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        slug: KSU-Cosmo/GalPop