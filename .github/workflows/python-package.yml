name: Python-Julia package

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11"]
        julia-version: ["1.11"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest pytest-cov
        pip install -r requirements.txt

    - name: Install Julia
      uses: julia-actions/setup-julia@v2
      with:
        version: ${{ matrix.julia-version }}

    # Install required Julia packages
    - name: Install Julia dependencies
      run: |
        julia -e '
          using Pkg
          Pkg.add(["PyCall", "SpecialFunctions", "Random", "Statistics"])
        '

    # Debug directory structure
    - name: Debug directory structure
      run: |
        echo "Current directory:"
        pwd
        echo "Repository contents:"
        ls -la
        echo "Source directory:"
        ls -la src || echo "src directory not found"
        echo "Tests directory:"
        ls -la tests || echo "tests directory not found"
        echo "Julia file:"
        find . -name "populate_galaxies.jl" -type f

    # Setup PyCall with explicit configuration
    - name: Setup PyCall
      run: |
        PYTHON_PATH=$(which python)
        echo "Python path: $PYTHON_PATH"
        julia -e '
          using Pkg
          ENV["PYTHON"] = "'$PYTHON_PATH'"
          println("Setting PyCall Python to: ", ENV["PYTHON"])
          Pkg.build("PyCall")
          using PyCall
          println("PyCall configured with Python: ", PyCall.python)
        '

    # Pre-check Julia integration
    - name: Verify Julia-Python integration
      run: |
        python -c "
        import sys, os, julia
        print('Python version:', sys.version)
        try:
            j = julia.Julia(compiled_modules=False)
            from julia import Main
            julia_file = os.path.abspath('src/populate_galaxies.jl')
            print(f'Including Julia file from: {julia_file}')
            Main.include(julia_file)
            print('Function exists:', hasattr(Main, 'populate_galaxies_julia'))
        except Exception as e:
            import traceback
            print('ERROR:')
            traceback.print_exc()
            sys.exit(1)
        "

    # Lint with flake8
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    # Run tests with proper environment variables
    - name: Test with pytest
      env:
        PYTHONPATH: ${{ github.workspace }}:${{ github.workspace }}/src
        JULIA_PROJECT: ${{ github.workspace }}
      run: |
        echo "PYTHONPATH: $PYTHONPATH"
        pytest -vv tests/

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@main
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        slug: KSU-Cosmo/GalPop